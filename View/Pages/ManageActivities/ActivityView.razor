@page "/activityview"
@page "/activityview/{SelectedDate:datetime?}"

<PageTitle>Activity View</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="16">
                <h1 class="ms-4">Activities</h1>

                <MudCardActions>
                    <MudIconButton OnClick="PrevDate" Icon="@Icons.Material.Filled.ArrowBackIos" aria-label="previous day"></MudIconButton>
                    <MudDatePicker Label="Choose date" @ref="_picker" Date="_date" DateChanged="HandleDateChangeAsync" AutoClose="true" MaxDate="@_maxDate" class="mx-4">
                        <PickerActions Context="_">
                            <MudButton Class="mr-auto align-self-start" OnClick="Today">Today</MudButton>
                        </PickerActions>
                    </MudDatePicker>
                    <MudIconButton OnClick="NextDate" Icon="@Icons.Material.Filled.ArrowForwardIos" Disabled="@_nextButtonDisabled" aria-label="next day"></MudIconButton>
                </MudCardActions>
                <MudDivider/>
            </MudStack>

            <DataInit Data="Activities">
                <ChildContent Context="activities">
                    <MudList Clickable="true">
                        @foreach (var activity in activities)
                        {
                            <MudListItem>
                                <MudGrid Style="min-height: 4rem;">
                                    <MudItem xs="7" Style="display: flex; align-items: center;">
                                        @if (!editMode)
                                        {
                                            @activity.Exercise.Name
                                        }
                                        else
                                        {
                                            <MudCheckBox Color="Color.Primary" Label="@activity.Exercise.Name" @bind-Checked="@activity.IsSelected" Style="min-width: 50%"></MudCheckBox>
                                        }
                                    </MudItem>
                                    <MudItem xs="3" Style="text-align: end; display: flex; align-items: center;">
                                        @Math.Round(activity.Weight, 2) kg
                                    </MudItem>
                                    <MudItem xs="2" Style="display: flex; align-items: center;">
                                        @if (!editMode)
                                        {
                                            <MudIconButton Icon="@Icons.Filled.Edit" OnClick="() => EditActivity(activity.Id)"/>
                                        }
                                        else
                                        {
                                            <MudIconButton Icon="@Icons.Filled.Delete" OnClick="() => DeleteActivity(activity.Id)"/>
                                        }
                                    </MudItem>
                                </MudGrid>
                            </MudListItem>
                        }
                    </MudList>


                    <div Style="position: fixed; bottom: 13vh; right: 2vh; display: grid; gap: 1rem;">
                        @if (editMode)
                        {
                            <MudFab OnClick="AskDeleteActivities" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"/>
                        }
                        else
                        {
                            <MudFab OnClick="NavigateToWorkoutView" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.FilterList"/>
                            <MudFab OnClick="NavigateToExerciseView" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.PlusOne"/>
                        }
                    </div>


                    <div Style="position: fixed; top: 2vh; right: 2vh; display: grid; gap: 1rem;">
                        @if (editMode)
                        {
                            <MudFab OnClick="ChangeEditMode" Color="Color.Info" StartIcon="@Icons.Material.Filled.EditOff"/>
                        }
                        else if (activities.Any())
                        {
                            <MudFab OnClick="ChangeEditMode" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Edit"/>
                        }
                    </div>
                </ChildContent>
            </DataInit>
        </MudContainer>


    </Authorized>
    <NotAuthorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="4">
                <h1 class="ms-4 mb-12">You are not logged in!</h1>
                <MudPaper class="pa-4" Elevation="3">
                    <div>Please click <a href="/login" style="color: yellow;">here</a> in order to get redirected to the Log In site!</div>
                </MudPaper>
            </MudStack>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>


@code {

    [Inject]
    private IDialogService DialogService { get; set; }

    [Parameter]
    public DateTime? SelectedDate { get; set; }

    MudDatePicker? _picker;
    DateTime _date = DateTime.Today;
    readonly DateTime _maxDate = DateTime.Today;
    bool _nextButtonDisabled = false;

    List<Activity> Activities { get; set; } = null!;

    bool editMode = false;

    private void ChangeEditMode()
    {
        editMode = !editMode;
        StateHasChanged();
    }

    private async Task Today()
    {
        await _picker!.GoToDate(DateTime.Today);
        _picker.Close();
    }

    async Task HandleDateChangeAsync(DateTime? dateTime)
    {
        Logger.LogInformation("HandleDateChange");
        try
        {
            _date = dateTime!.Value;

            _nextButtonDisabled = _date == _maxDate;

            Activities = await ActivityRepository.GetActivitiesByUserByDate(UserService.CurrentUser!.Id, new DateOnly(_date.Year, _date.Month, _date.Day));
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    async Task PrevDate()
    {
        await HandleDateChangeAsync(_date.AddDays(-1));
    }

    async Task NextDate()
    {
        await HandleDateChangeAsync(_date.AddDays(1));
    }

    async Task EditActivity(int activityId)
    {
        NavigationManager.NavigateTo($"/editactivity/{_date:yyyy-MM-dd}/{activityId}");
    }

    private void NavigateToWorkoutView()
    {
        NavigationManager.NavigateTo($"/workoutview/{_date:yyyy-MM-dd}");
    }

    private void NavigateToExerciseView()
    {
        NavigationManager.NavigateTo($"/exerciseview/{_date:yyyy-MM-dd}");
    }

    private async void AskDeleteActivities()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result is true)
        {
            DeleteActivities();
        }

        StateHasChanged();
    }

    private async void DeleteActivities()
    {
        await ActivityRepository.DeleteAsync(Activities.Where(a => a.IsSelected));

        if (UserService.CurrentUser != null)
        {
            Activities = await ActivityRepository.GetActivitiesByUserByDate(UserService.CurrentUser!.Id, new DateOnly(_date.Year, _date.Month, _date.Day));
        }

        editMode = false;

        StateHasChanged();
    }

    private async void AskDeleteActivity(int activityId)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result is true)
        {
            DeleteActivity(activityId);
        }

        StateHasChanged();
    }

    private async void DeleteActivity(int activityId)
    {
        await ActivityRepository.DeleteAsync(Activities.Where(a => a.Id == activityId));

        if (UserService.CurrentUser != null)
        {
            Activities = await ActivityRepository.GetActivitiesByUserByDate(UserService.CurrentUser!.Id, new DateOnly(_date.Year, _date.Month, _date.Day));
        }

        if (!Activities.Any())
            editMode = false;

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (await UserService.IsAuthenticated()) {
            Activities = await ActivityRepository.GetActivitiesByUserByDate(UserService.CurrentUser!.Id, new DateOnly(_date.Year, _date.Month, _date.Day));
        }

        if (SelectedDate.HasValue)
        {
            await HandleDateChangeAsync(SelectedDate);
        }

        if (_date == _maxDate)
        {
            _nextButtonDisabled = true;
        }
    }

}