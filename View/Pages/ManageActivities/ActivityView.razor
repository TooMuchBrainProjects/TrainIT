@page "/activityview"
@page "/activityview/{SelectedDate:datetime?}"

<PageTitle>Activity View</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="16">
                <h1 class="ms-4">Exercises</h1>

                <MudCardActions>
                    <MudIconButton OnClick="PrevDate" Icon="@Icons.Material.Filled.ArrowBackIos" aria-label="previous day"></MudIconButton>
                    <MudDatePicker Label="Choose date" @ref="_picker" Date="_date" DateChanged="HandleDateChangeAsync" AutoClose="true" MaxDate="@_maxDate" class="mx-4">
                        <PickerActions Context="_">
                            <MudButton Class="mr-auto align-self-start" OnClick="Today">Today</MudButton>
                        </PickerActions>
                    </MudDatePicker>
                    <MudIconButton OnClick="NextDate" Icon="@Icons.Material.Filled.ArrowForwardIos" Disabled="@_nextButtonDisabled" aria-label="next day"></MudIconButton>
                </MudCardActions>
                <MudDivider/>
            </MudStack>

            <DataInit Data="Activities">
                <ChildContent Context="activities">
                    <MudList Clickable="true">
                        @foreach (var activity in activities)
                        {
                            <MudListItem OnClick="() => EditActivity(activity.Id)">
                                <MudGrid Style="min-height: 4rem;">
                                    <MudItem xs="8" Style="display: flex; align-items: center;">
                                        @activity.Exercise.Name
                                    </MudItem>
                                    <MudItem xs="3" Style="text-align: end; display: flex; align-items: center;">
                                        @Math.Round(activity.Weight, 2) kg
                                    </MudItem>
                                    <MudItem xs="1" Style="display: flex; align-items: center;">
                                        <MudIcon Icon="@Icons.Filled.ArrowForwardIos"/>
                                    </MudItem>
                                </MudGrid>
                            </MudListItem>
                        }
                    </MudList>
                </ChildContent>
            </DataInit>
        </MudContainer>

        <div Style="position: fixed; bottom: 13vh; right: 2vh; display: grid; gap: 1rem;">
            <MudFab OnClick="NavigateToWorkoutView" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.FilterList"/>
            <MudFab OnClick="NavigateToExerciseView" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.PlusOne"/>
        </div>
    </Authorized>
    <NotAuthorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="4">
                <h1 class="ms-4 mb-12">You are not logged in!</h1>
                <MudPaper class="pa-4" Elevation="3">
                    <div>Please click <a href="/login" style="color: yellow;">here</a> in order to get redirected to the Log In site!</div>
                </MudPaper>
            </MudStack>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public DateTime? SelectedDate { get; set; }
    
    MudDatePicker? _picker;
    DateTime _date = DateTime.Today;
    readonly DateTime _maxDate = DateTime.Today;
    bool _nextButtonDisabled = false;

    List<Activity> Activities { get; set; } = null!;

    private async Task Today()
    {
        await _picker!.GoToDate(DateTime.Today);
        _picker.Close();
    }

    async Task HandleDateChangeAsync(DateTime? dateTime)
    {
        Logger.LogInformation("HandleDateChange");
        try
        {
            _date = dateTime!.Value;
            
            _nextButtonDisabled = _date == _maxDate;
            
            Activities = await ActivityRepository.GetActivitiesByUserByDate(UserService.CurrentUser!.Id, new DateOnly(_date.Year, _date.Month, _date.Day));
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    async Task PrevDate()
    {
        await HandleDateChangeAsync(_date.AddDays(-1));
    }

    async Task NextDate()
    {
        await HandleDateChangeAsync(_date.AddDays(1));
    }

    async Task EditActivity(int activityId)
    {
        NavigationManager.NavigateTo($"/editactivity/{_date:yyyy-MM-dd}/{activityId}");
    }

    private void NavigateToWorkoutView()
    {
        NavigationManager.NavigateTo($"/workoutview/{_date:yyyy-MM-dd}");
    }

    private void NavigateToExerciseView()
    {
        NavigationManager.NavigateTo($"/exerciseview/{_date:yyyy-MM-dd}");
    }

    protected override async Task OnInitializedAsync()
    {
        if (UserService.CurrentUser != null)
        {
            Activities = await ActivityRepository.GetActivitiesByUserByDate(UserService.CurrentUser!.Id, new DateOnly(_date.Year, _date.Month, _date.Day));
        }

        if (SelectedDate.HasValue)
        {
            await HandleDateChangeAsync(SelectedDate);
        }

        if (_date == _maxDate)
        {
            _nextButtonDisabled = true;
        }
    }

}