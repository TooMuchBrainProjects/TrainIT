@page "/newactivity"

<PageTitle>New Activity</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="4">
                <h1 class="ms-4 mb-12">New Activity</h1>

                <MudForm>
                    <MudStack Spacing="4">
                        <MudPaper class="pa-4" Elevation="3">
                            <MudText>Type of Creation:</MudText>
                            <MudRadioGroup @bind-SelectedOption="@SelectedTypeOfAddition">
                                <MudRadio Option="@(AdditionType.ONE)" Color="Color.Primary">Add 1 Activity!</MudRadio>
                                <MudRadio Option="@(AdditionType.MULTIPLE)" Color="Color.Secondary">Add multiple Activities!</MudRadio>
                            </MudRadioGroup>
                        </MudPaper>

                        @switch (SelectedTypeOfAddition)
                        {
                            case AdditionType.ONE:
                                <MudPaper class="pa-4" Elevation="3">
                                    <DataInit Data="Exercises">
                                        <ChildContent Context="exercises">
                                            <MudSelect T="Exercise" @bind-value="SelectedExercise" Label="Exercise" ToStringFunc="@GetExerciseName" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                                @foreach (var exercise in exercises)
                                                {
                                                    <MudSelectItem Value="@exercise"/>
                                                }
                                            </MudSelect>
                                        </ChildContent>
                                    </DataInit>
                                </MudPaper>

                                @if (SelectedExercise != null)
                                {
                                    <MudPaper class="pa-4" Elevation="3">
                                        <DataInit Data="Activity">
                                            <ChildContent Context="activity">
                                                <MudStack Spacing="3">
                                                    <MudTextField @bind-Value="activity.Weight" Label="Weight" Variant="Variant.Outlined"
                                                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.MonitorWeight" AdornmentColor="Color.Secondary"
                                                                  InputMode="InputMode.numeric" InputType="InputType.Text"
                                                                  Immediate="true"/>
                                                    <MudTextField @bind-Value="activity.Set" Label="Set" Variant="Variant.Outlined"
                                                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.MonitorWeight" AdornmentColor="Color.Secondary"
                                                                  InputMode="InputMode.numeric" InputType="InputType.Text"
                                                                  Immediate="true"/>
                                                    <MudTextField @bind-Value="activity.Repetition" Label="Repetition" Variant="Variant.Outlined"
                                                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.MonitorWeight" AdornmentColor="Color.Secondary"
                                                                  InputMode="InputMode.numeric" InputType="InputType.Text"
                                                                  Immediate="true"/>
                                                </MudStack>
                                            </ChildContent>
                                        </DataInit>
                                    </MudPaper>
                                }
                                break;
                            case AdditionType.MULTIPLE:
                                break;
                            default:
                                <MudText>Please select an option above!</MudText>
                                break;
                        }
                    </MudStack>
                </MudForm>
            </MudStack>
        </MudContainer>
        
        <MudText>
            Debugging: 
            <br/>
            Selected Exercise: @if (SelectedExercise != null) @SelectedExercise.Name
            <br/>
            AdditionType: @SelectedTypeOfAddition 
            <br/>
            Activity Exercise: @Activity.Exercise
        </MudText>

        <div Style="position: fixed; bottom: 13vh; right: 2vh; display: grid; gap: 1rem;">
            <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Check" OnClick="SaveNewActivity"/>
        </div>
    </Authorized>
    <Authorizing>
        Sind wir hier?
    </Authorizing>
</AuthorizeView>


@code {
    AdditionType? _selectedTypeOfAddition = AdditionType.ONE;

    AdditionType SelectedTypeOfAddition
    {
        get => _selectedTypeOfAddition ??= AdditionType.ONE;
        set
        {
            if (_selectedTypeOfAddition == value) return;
            _selectedTypeOfAddition = value;
            ResetValues();
        }
    }

    Activity Activity { get; set; } = new Activity();

    List<Exercise> Exercises { get; set; }

    Exercise? _selectedExercise;

    Exercise? SelectedExercise
    {
        get => _selectedExercise;
        set
        {
            if (_selectedExercise == value) return;
            _selectedExercise = value;
            SelectedExerciseChanged();
        }
    }

    readonly Func<Exercise, string> GetExerciseName = e => e.Name;

    public async Task SelectedExerciseChanged()
    {
        if (SelectedExercise == null) return;
        
        var lastActivity = await ActivityRepository.GetLastActivityByExercise(SelectedExercise.Id);

        if (lastActivity != null)
        {
            Activity = new Activity()
            {
                Exercise = SelectedExercise,
                Repetition = lastActivity.Repetition,
                Set = lastActivity.Set,
                Weight = lastActivity.Weight
            };
        }
        else
        {
            Activity = new Activity()
            {
                Exercise = SelectedExercise
            };
        }
        
        StateHasChanged();
    }

    public void ResetValues()
    {
        Activity = new Activity();
        _selectedExercise = null;
    }

    async Task SaveNewActivity()
    {
        if (SelectedExercise == null)
        {
            Snackbar.Add($"Please select an exercise!", Severity.Info);
            return;
        }

        Activity.Exercise = SelectedExercise;
        Activity.DateValue = DateOnly.FromDateTime(DateTime.Today);

        await ActivityRepository.CreateAsync(Activity);

        Snackbar.Add("Activity created successfully", Severity.Success);
        NavigationManager.NavigateTo($"/activityview");
    }

    protected override async Task OnInitializedAsync()
    {
        if (!await UserService.IsAuthenticated()) return;

        Exercises = await ExerciseRepository.ReadAsync(e => e.UserId == UserService.CurrentUser!.Id);
    }

    public enum AdditionType
    {
        ONE,
        MULTIPLE
    }

}