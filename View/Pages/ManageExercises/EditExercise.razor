@page "/editexercise/{SelectedDate:datetime}"
@page "/editexercise/{SelectedDate:datetime}/{ExerciseId:int}"

<PageTitle>Edit Exercise</PageTitle>


<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="4">
                @if (ExerciseId == null)
                {
                    <h1 class="ms-4 mb-12">Create Exercise</h1>
                }
                else
                {
                    <h1 class="ms-4 mb-12">Edit Exercise</h1>
                }

                <MudForm>
                    <DataInit Data="Exercise">
                        <ChildContent Context="exercise">
                            <MudStack Spacing="4">
                                <MudPaper class="pa-4" Elevation="3">
                                    <MudTextField @bind-Value="exercise.Name" Label="Name" Variant="Variant.Outlined"
                                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.TextFormat" AdornmentColor="Color.Secondary"
                                                  Counter="100" MaxLength="100"
                                                  Immediate="true"/>
                                </MudPaper>
                                <MudPaper class="pa-4" Elevation="3">
                                    <MudTextField @bind-Value="exercise.Machine" Label="Machine" Variant="Variant.Outlined"
                                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.FitnessCenter" AdornmentColor="Color.Secondary"
                                                  Counter="100" MaxLength="100"
                                                  Immediate="true"/>
                                </MudPaper>
                                <MudPaper class="pa-4" Elevation="3">
                                    <MudTextField @bind-Value="exercise.Description" Label="Description" Variant="Variant.Outlined"
                                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Description" AdornmentColor="Color.Secondary"
                                                  Immediate="true"
                                                  Lines="5"/>
                                </MudPaper>
                            </MudStack>
                        </ChildContent>
                    </DataInit>
                </MudForm>

            </MudStack>
        </MudContainer>

        <div Style="position: fixed; bottom: 13vh; right: 2vh; display: grid; gap: 1rem;">
            <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Check" OnClick="SaveExerciseChanges"/>
        </div>

        <div Style="position: fixed; top: 2vh; right: 2vh; display: grid; gap: 1rem;">
            <MudFab OnClick="AskDeleteExercise" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"/>
        </div>
    </Authorized>
</AuthorizeView>


@code {

    [Inject]
    private IDialogService DialogService { get; set; }

    [Parameter]
    public DateTime SelectedDate { get; set; }

    Exercise? Exercise { get; set; }

    [Parameter]
    public int? ExerciseId { get; set; }

    async Task SaveExerciseChanges()
    {
        if (ExerciseId == null)
        {
            if (Exercise.Name == null)
            {
                await DialogService.ShowMessageBox(
                    "Warning",
                    "There must be a Name!"
                    );
            }
            else
            {
                await ExerciseRepository.CreateAsync(Exercise);
                NavigationManager.NavigateTo($"/exerciseview/{SelectedDate:yyyy-MM-dd}");
            }
        }
        else
        {
            await ExerciseRepository.UpdateAsync(Exercise);
            NavigationManager.NavigateTo($"/exerciseview/{SelectedDate:yyyy-MM-dd}");
        }
    }

    private async void AskDeleteExercise()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result is true)
        {
            DeleteExercise();
        }

        StateHasChanged();
    }

    private async void DeleteExercise()
    {
        if (ExerciseId != null)
        {
            await ExerciseRepository.DeleteAsync(Exercise);
        }
        NavigationManager.NavigateTo($"/exerciseview/{SelectedDate:yyyy-MM-dd}");

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (await UserService.IsAuthenticated())
        {
            if (ExerciseId == null)
            {
                Exercise = new Exercise()
                {
                    UserId = UserService.CurrentUser.Id
                };
            }
            else
            {
                Exercise = await ExerciseRepository.GetExerciseById(ExerciseId.Value);
            }
        }
    }

}