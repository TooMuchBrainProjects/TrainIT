@page "/editexercise/{ExerciseId:int}"

<PageTitle>Edit Exercise</PageTitle>


<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="4">
                <h1 class="ms-4 mb-12">Edit Exercise</h1>
                <MudForm>
                    <DataInit Data="Exercise">
                        <ChildContent Context="exercise">
                            <MudStack Spacing="4">
                                <MudPaper class="pa-4" Elevation="3">
                                    <MudTextField @bind-Value="exercise.Name" Label="Name" Variant="Variant.Outlined"
                                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.TextFormat" AdornmentColor="Color.Secondary"
                                                  Counter="100" MaxLength="100"
                                                  Immediate="true"/>
                                </MudPaper>
                                <MudPaper class="pa-4" Elevation="3">
                                    <MudTextField @bind-Value="exercise.Machine" Label="Machine" Variant="Variant.Outlined"
                                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.FitnessCenter" AdornmentColor="Color.Secondary"
                                                  Counter="100" MaxLength="100"
                                                  Immediate="true"/>
                                </MudPaper>
                                <MudPaper class="pa-4" Elevation="3">
                                    <MudTextField @bind-Value="exercise.Description" Label="Description" Variant="Variant.Outlined"
                                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Description" AdornmentColor="Color.Secondary"
                                                  Immediate="true"
                                                  Lines="5"/>
                                </MudPaper>
                            </MudStack>
                        </ChildContent>
                    </DataInit>
                </MudForm>
            </MudStack>
            <MudButton class="mt-5" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" FullWidth="true" OnClick="DeleteExercise">Delete Exercise</MudButton>
        </MudContainer>

        <div Style="position: fixed; bottom: 13vh; right: 2vh; display: grid; gap: 1rem;">
            <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Check" OnClick="SaveExerciseChanges"/>
        </div>
    </Authorized>
</AuthorizeView>


@code {

    [Inject]
    private IDialogService DialogService { get; set; }

    Exercise? Exercise { get; set; }

    [Parameter]
    public int? ExerciseId { get; set; }

    async Task SaveExerciseChanges()
    {
        if (String.IsNullOrEmpty(Exercise.Name))
        {
            await DialogService.ShowMessageBox(
                "Warning",
                "There must be a Name!"
                );
        }
        else
        {
            await ExerciseRepository.UpdateAsync(Exercise);
            NavigationManager.NavigateTo($"/exerciseview");
        }
    }

    private async void DeleteExercise()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result is true)
        {
            await ExerciseRepository.DeleteAsync(Exercise);
            NavigationManager.NavigateTo($"/exerciseview");
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!await UserService.IsAuthenticated()) return;
        Exercise = await ExerciseRepository.GetExerciseById(ExerciseId.Value);
    }

}