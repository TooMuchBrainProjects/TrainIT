@page "/exerciseview"
@page "/exerciseview/{WorkoutId:int?}"

<PageTitle>Exercise View</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="8">
                @if (Workout == null)
                {
                    <h1 class="ms-4">All Exercises</h1>
                }
                else
                {
                    <h1 class="ms-4">
                        Workout: <br/>
                        @Workout.Name
                    </h1>
                }

                <MudDivider/>
            </MudStack>

            <DataInit Data="Exercises">
                <ChildContent Context="exercises">
                    <MudList Clickable="true">
                        @foreach (var exercise in exercises)
                        {
                            <MudListItem>
                                <MudGrid Style="min-height: 4rem;">
                                    <MudItem xs="10" Style="display: flex; align-items: center;">
                                        @if (!editMode)
                                        {
                                            <MudCheckBox Color="Color.Primary" Label="@exercise.Name" @bind-Checked="@exercise.IsSelected" Style="min-width: 50%"></MudCheckBox>
                                        }
                                        else
                                        {
                                            @exercise.Name
                                        }
                                    </MudItem>
                                    <MudItem xs="2">
                                        @if (!editMode)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="() => EditExercise(exercise.Id)"/>
                                        }
                                        else
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="() => AskDeleteExercise(exercise.Id)"/>
                                        }
                                    </MudItem>
                                </MudGrid>

                            </MudListItem>
                        }
                    </MudList>
                </ChildContent>
            </DataInit>
        </MudContainer>

        <div Style="position: fixed; bottom: 13vh; right: 2vh;">
            @if (editMode)
            {
                <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Add" OnClick="AddExercise"/>
            }
            else
            {
                <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Check" OnClick="AddActivities"/>
            }
        </div>

        <div Style="position: fixed; top: 2vh; right: 2vh; display: grid; gap: 1rem;">
            @if (editMode)
            {
                <MudFab OnClick="ChangeEditMode" Color="Color.Error" StartIcon="@Icons.Material.Filled.EditOff"/>
            }
            else
            {
                <MudFab OnClick="ChangeEditMode" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Edit"/>
            }
        </div>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


@code {

    [Inject]
    private IDialogService DialogService { get; set; }

    [Parameter]
    public int? WorkoutId { get; set; }

    Workout? Workout { get; set; }

    List<Exercise> Exercises { get; set; } = null!;

    bool editMode = false;

    private void ChangeEditMode()
    {
        editMode = !editMode;
        StateHasChanged();
    }


    void EditExercise(int exerciseId)
    {
        NavigationManager.NavigateTo($"/editexercise/{exerciseId}");
    }

    async Task AddActivities()
    {
        Exercises = Exercises.Where(e => e.IsSelected).ToList();

        var lastActivities = await ActivityRepository.GetLastActivitiesByExercises(Exercises.Select(exercise => exercise.Id).ToList());
        var newActivities = new List<Activity>();
        if (lastActivities.Any())
        {
            newActivities = Exercises.Select((t, i) => new Activity()
            {
                ExerciseId = t.Id, Exercise = t, DateValue = DateOnly.FromDateTime(DateManager.SelectedDate), Repetition = lastActivities[i].Repetition, Set = lastActivities[i].Set, Weight = lastActivities[i].Weight
            }).ToList();
        }
        else
        {
            newActivities = Exercises.Select((t, i) => new Activity()
            {
                ExerciseId = t.Id, Exercise = t, DateValue = DateOnly.FromDateTime(DateManager.SelectedDate), Repetition = default, Set = default, Weight = default
            }).ToList();
        }


        await ActivityRepository.CreateAsync(newActivities);

        Exercises.ForEach(e => e.IsSelected = false);
        NavigationManager.NavigateTo($"/activityview");
    }

    async Task AddExercise()
    {
        NavigationManager.NavigateTo($"/editexercise");
    }

    private async void AskDeleteExercises()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result is true)
        {
            DeleteExercises();
        }

        StateHasChanged();
    }

    private async void DeleteExercises()
    {
        await ExerciseRepository.DeleteAsync(Exercises.Where(a => a.IsSelected));

        if (await UserService.IsAuthenticated())
        {
            Exercises = await ExerciseRepository.GetExercisesByUser(UserService.CurrentUser!.Id);
        }

        editMode = false;

        Exercises.ForEach(e => e.IsSelected = false);

        StateHasChanged();
    }

    private async void AskDeleteExercise(int exerciseId)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "You're going to delete all exercises trained in the past! Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result is true)
        {
            DeleteExercise(exerciseId);
        }

        StateHasChanged();
    }

    private async void DeleteExercise(int exerciseId)
    {
        await ExerciseRepository.DeleteAsync(Exercises.Where(e => e.Id == exerciseId));

        if (await UserService.IsAuthenticated())
        {
            if (WorkoutId.HasValue)
            {
                Workout = await WorkoutRepository.GetWorkoutById(WorkoutId.Value);
                Exercises = await ExerciseRepository.GetExercisesByWorkout(WorkoutId.Value);
                foreach (var exercise in Exercises)
                {
                    exercise.IsSelected = true;
                }
            }
            else
            {
                Exercises = await ExerciseRepository.GetExercisesByUser(UserService.CurrentUser!.Id);
            }
        }

        if (!Exercises.Any())
            editMode = false;

        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        if (await UserService.IsAuthenticated())
        {
            if (WorkoutId.HasValue)
            {
                Workout = await WorkoutRepository.GetWorkoutById(WorkoutId.Value);
                Exercises = await ExerciseRepository.GetExercisesByWorkout(WorkoutId.Value);
                foreach (var exercise in Exercises)
                {
                    exercise.IsSelected = true;
                }
            }
            else
            {
                Exercises = await ExerciseRepository.GetExercisesByUser(UserService.CurrentUser!.Id);
            }
        }
    }

}