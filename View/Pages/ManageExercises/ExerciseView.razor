@page "/exerciseview/{SelectedDate:datetime}"
@page "/exerciseview/{SelectedDate:datetime}/{WorkoutId:int?}"

<PageTitle>Exercise View</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="8">
                @if (Workout == null)
                {
                    <h1 class="ms-4">All Exercises</h1>
                }
                else
                {
                    <h1 class="ms-4">
                        Workout: <br/>
                        @Workout.Name
                    </h1>
                }
                <MudDivider/>
            </MudStack>

            <DataInit Data="Exercises">
                <ChildContent Context="exercises">
                    <MudList Clickable="true">
                        @foreach (var exercise in exercises)
                        {
                            <MudListItem>
                                <MudGrid>
                                    <MudItem xs="10">
                                        <MudCheckBox Color="Color.Primary" Label="@exercise.Name" @bind-Checked="@exercise.IsSelected"></MudCheckBox>
                                    </MudItem>
                                    <MudItem xs="2">
                                        <MudIconButton Icon="@Icons.Material.Filled.ArrowForwardIos" Color="Color.Surface" aria-label="edit-exercise" OnClick="() => EditExercise(exercise.Id)"></MudIconButton>
                                    </MudItem>
                                </MudGrid>

                            </MudListItem>
                        }
                    </MudList>
                </ChildContent>
            </DataInit>
        </MudContainer>

        <div Style="position: fixed; bottom: 13vh; right: 2vh;">
            <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Check" OnClick="AddActivities"/>
        </div>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter]
    public DateTime SelectedDate { get; set; }

    [Parameter]
    public int? WorkoutId { get; set; }

    Workout? Workout { get; set; }

    List<Exercise> Exercises { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        if (WorkoutId.HasValue)
        {
            Workout = await WorkoutRepository.GetWorkoutById(WorkoutId.Value);
            Exercises = await ExerciseRepository.GetExercisesByWorkout(WorkoutId.Value);
            foreach (var exercise in Exercises)
            {
                exercise.IsSelected = true;
            }
        }
        else
        {
            Exercises = await ExerciseRepository.GetExercisesByUser(UserService.CurrentUser!.Id);
        }
    }

    void EditExercise(int exerciseId)
    {
        NavigationManager.NavigateTo($"/editexercise/{SelectedDate:yyyy-MM-dd}/{exerciseId}");
    }

    async Task AddActivities()
    {
        Exercises = Exercises.Where(e => e.IsSelected == true).ToList();

        var lastActivities = await ActivityRepository.GetLastActivitiesByExercises(Exercises.Select(exercise => exercise.Id).ToList());
        
        var newActivities = Exercises.Select((t, i) => new Activity()
        {
            ExerciseId = t.Id, Exercise = t, DateValue = DateOnly.FromDateTime(SelectedDate), Repetition = lastActivities[i].Repetition, Set = lastActivities[i].Set, Weight = lastActivities[i].Weight
        }).ToList();

        await ActivityRepository.CreateAsync(newActivities);

        foreach (var exercise in Exercises)
        {
            exercise.IsSelected = false;
        }
        
        NavigationManager.NavigateTo($"/activityview/{SelectedDate:yyyy-MM-dd}");
    }

}