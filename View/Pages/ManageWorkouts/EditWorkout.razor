@page "/editworkout/{SelectedDate:datetime}"
@page "/editworkout/{SelectedDate:datetime}/{WorkoutId:int}"

<PageTitle>Edit Workout</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="4">
                @if (WorkoutId == null)
                {
                    <h1 class="ms-4 mb-12">Create Workout</h1>
                }
                else
                {
                    <h1 class="ms-4 mb-12">Edit Workout</h1>
                }

                <MudForm>
                    <DataInit Data="Workout">
                        <ChildContent Context="workout">
                            <MudStack Spacing="4">
                                <MudPaper class="pa-4" Elevation="3">
                                    <MudTextField @bind-Value="workout.Name" Label="Name" Variant="Variant.Outlined"
                                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.TextFormat" AdornmentColor="Color.Secondary"
                                                  Counter="100" MaxLength="100"
                                                  Immediate="true"/>
                                </MudPaper>
                                <MudPaper class="pa-4" Elevation="3">
                                    <MudTextField @bind-Value="workout.Description" Label="Description" Variant="Variant.Outlined"
                                                  Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Description" AdornmentColor="Color.Secondary"
                                                  Immediate="true"
                                                  Lines="5"/>
                                </MudPaper>
                            </MudStack>
                        </ChildContent>
                    </DataInit>
                    <h2 class="ms-0 mb-5 mt-10">Add Exercises</h2>
                    <DataInit Data="Exercises">
                        <ChildContent Context="exercises">
                            <MudStack Spacing="4">
                                <MudPaper class="pa-4" Elevation="3">
                                    <MudList Clickable="true">
                                        @foreach (var exercise in exercises)
                                        {
                                            <MudListItem>
                                                <MudGrid Style="min-height: 4rem;">
                                                    <MudItem xs="10" Style="display: flex; align-items: center;">
                                                        <MudCheckBox Color="Color.Primary" Label="@exercise.Name" @bind-Checked="@exercise.IsSelected" Style="min-width: 50%"></MudCheckBox>
                                                    </MudItem>
                                                </MudGrid>
                                            </MudListItem>
                                        }
                                    </MudList>
                                </MudPaper>
                            </MudStack>
                        </ChildContent>
                    </DataInit>
                </MudForm>
            </MudStack>
        </MudContainer>

        <div Style="position: fixed; bottom: 13vh; right: 2vh; display: grid; gap: 1rem;">
            <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Check" OnClick="SaveWorkoutChanges"/>
        </div>


        <div Style="position: fixed; top: 2vh; right: 2vh; display: grid; gap: 1rem;">
            <MudFab OnClick="AskDeleteWorkout" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"/>
        </div>
    </Authorized>
</AuthorizeView>

@code {

    [Inject]
    private IDialogService DialogService { get; set; }

    [Parameter]
    public DateTime SelectedDate { get; set; }

    [Parameter]
    public int? WorkoutId { get; set; }

    Workout? Workout { get; set; }

    List<Exercise> Exercises { get; set; } = null!;

    List<Exercise> SelectedExercises { get; set; } = null!;

    async Task SaveWorkoutChanges()
    {
        if (WorkoutId == null)
        {
            if (Workout.Name == null)
            {
                await DialogService.ShowMessageBox(
                    "Warning",
                    "Please name it!"
                    );
            }
            else if (!Exercises.Exists(e => e.IsSelected))
            {
                await DialogService.ShowMessageBox(
                    "Warning",
                    "Please select at least one exercise!"
                    );
            }
            else
            {
                Exercises = Exercises.Where(e => e.IsSelected == true).ToList();
                await WorkoutRepository.CreateAsync(Workout);
                var workoutExercises = Exercises.Select(exercise => new WorkoutExercise() { Exercise = exercise, Workout = Workout }).ToList();
                await WorkoutExerciseRepository.CreateAsync(workoutExercises);

                NavigationManager.NavigateTo($"/workoutview/{SelectedDate:yyyy-MM-dd}");
            }
        }
        else
        {
    // Workout updaten
            await WorkoutRepository.UpdateAsync(Workout);

            Exercises = Exercises.Where(e => e.IsSelected == true).ToList();
    // SelectedExercises = oldState
    // Exercises = newState

            var oldStateIds = SelectedExercises.Select(s => s.Id).ToList();
            var newStateIds = Exercises.Select(e => e.Id).ToList();

            var additionalExerciseIds = newStateIds.Except(oldStateIds).ToList();

            var outdatedExerciseIds = oldStateIds.Except(newStateIds).ToList();

    // add new

            if (additionalExerciseIds.Any())
            {
                var exercises = await ExerciseRepository.GetExercisesByUser(UserService.CurrentUser!.Id);

                exercises = exercises.Where(e => additionalExerciseIds.Contains(e.Id)).ToList();

                List<WorkoutExercise> workoutExercises = new List<WorkoutExercise>();

                foreach (var exercise in exercises)
                {
                    workoutExercises.Add(new WorkoutExercise() { Exercise = exercise, Workout = Workout});
                }

                await WorkoutExerciseRepository.CreateAsync(workoutExercises);
            }

    // remove outdated
            if (outdatedExerciseIds.Any())
            {
                await WorkoutExerciseRepository.DeleteAsync(await WorkoutExerciseRepository.ReadAsync(we => outdatedExerciseIds.Contains(we.ExerciseId)));
            }


            NavigationManager.NavigateTo($"/workoutview/{SelectedDate:yyyy-MM-dd}");
        }
    }

    private async void AskDeleteWorkout()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result is true)
        {
            DeleteWorkout();
        }

        StateHasChanged();
    }

    private async void DeleteWorkout()
    {
        await WorkoutRepository.DeleteAsync(Workout);
        NavigationManager.NavigateTo($"/workoutview/{SelectedDate:yyyy-MM-dd}");
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (await UserService.IsAuthenticated())
        {
            if (WorkoutId == null)
            {
                Workout = new Workout();
            }
            else
            {
                Workout = await WorkoutRepository.GetWorkoutById(WorkoutId.Value);
            }
            Exercises = await ExerciseRepository.GetExercisesByUser(UserService.CurrentUser!.Id);
            Exercises.ForEach(e => e.IsSelected = false);

            var selectedExercisesId = (await WorkoutExerciseRepository.ReadAsync(we => we.Workout == Workout)).Select(we => we.ExerciseId);
            SelectedExercises = await ExerciseRepository.ReadAsync(e => selectedExercisesId.Contains(e.Id));

            foreach (var exercise in Exercises.Where(e => selectedExercisesId.Contains(e.Id)))
            {
                exercise.IsSelected = true;
            }
        }
    }

}