@page "/workoutview"

<PageTitle>Workout View</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="16">
                <h1 class="ms-4">Workouts</h1>

                <DataInit Data="Workouts">
                    <ChildContent Context="workouts">
                        <MudList Clickable="true">
                            @foreach (var workout in workouts)
                            {
                                <MudListItem OnClick="() => NavigateToExerciseView(workout.Id)">
                                    <MudGrid Style="min-height: 4rem;">
                                        <MudItem xs="10" Style="display: flex; align-items: center;">
                                            @if (!editMode)
                                            {
                                                @workout.Name
                                            }
                                            else
                                            {
                                                <MudCheckBox Color="Color.Primary" Label="@workout.Name" @bind-Checked="@workout.IsSelected" Style="min-width: 50%"></MudCheckBox>
                                            }
                                        </MudItem>
                                        <MudItem xs="2" Style="display: flex; align-items: center;">
                                            @if (!editMode)
                                            {
                                                <MudIconButton Icon="@Icons.Filled.Edit" OnClick="() => EditWorkout(workout.Id)"/>
                                            }
                                            else
                                            {
                                                <MudIconButton Icon="@Icons.Filled.Delete" OnClick="() => DeleteWorkout(workout.Id)"/>
                                            }
                                        </MudItem>
                                    </MudGrid>
                                </MudListItem>
                            }
                        </MudList>

                        <div Style="position: fixed; bottom: 13vh; right: 2vh; display: grid; gap: 1rem;">
                            @if (editMode)
                            {
                                <MudFab OnClick="AskDeleteWorkouts" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"/>
                            }
                            else
                            {
                                <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Add" OnClick="AddWorkout"/>
                            }
                        </div>

                        <div Style="position: fixed; top: 2vh; right: 2vh; display: grid; gap: 1rem;">
                            @if (editMode)
                            {
                                <MudFab OnClick="ChangeEditMode" Color="Color.Info" StartIcon="@Icons.Material.Filled.EditOff"/>
                            }
                            else if (workouts.Any())
                            {
                                <MudFab OnClick="ChangeEditMode" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Edit"/>
                            }
                        </div>
                    </ChildContent>
                </DataInit>
            </MudStack>
        </MudContainer>
    </Authorized>
</AuthorizeView>

@code {

    [Inject]
    private IDialogService DialogService { get; set; }

    List<Workout> Workouts { get; set; } = null!;

    bool editMode = false;

    private void ChangeEditMode()
    {
        editMode = !editMode;
        StateHasChanged();
    }

    void EditWorkout(int workoutId)
    {
        NavigationManager.NavigateTo($"/editworkout/{workoutId}");
    }

    void NavigateToExerciseView(int workoutId)
    {
        NavigationManager.NavigateTo($"/exerciseview/{workoutId}");
    }

    private async void AskDeleteWorkouts()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result is true)
        {
            DeleteWorkouts();
        }

        StateHasChanged();
    }

    private async void DeleteWorkouts()
    {
        await WorkoutRepository.DeleteAsync(Workouts.Where(a => a.IsSelected));

        if (UserService.CurrentUser != null)
        {
            Workouts = await WorkoutRepository.GetWorkoutsByUser(UserService.CurrentUser!.Id);
        }

        editMode = false;

        StateHasChanged();
    }

    private async void AskDeleteWorkout(int activityId)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel");

        if (result is true)
        {
            DeleteWorkout(activityId);
        }

        StateHasChanged();
    }

    private async void DeleteWorkout(int activityId)
    {
        await WorkoutRepository.DeleteAsync(Workouts.Where(a => a.Id == activityId));

        if (UserService.CurrentUser != null)
        {
            Workouts = await WorkoutRepository.GetWorkoutsByUser(UserService.CurrentUser!.Id);
        }

        if (!Workouts.Any())
            editMode = false;

        StateHasChanged();
    }
    
    async Task AddWorkout()
    {
        NavigationManager.NavigateTo($"/editworkout");
    }

    protected override async Task OnInitializedAsync()
    {
        if (await UserService.IsAuthenticated())
        {
            Workouts = await WorkoutRepository.GetWorkoutsByUser(UserService.CurrentUser!.Id);
        }
    }
}