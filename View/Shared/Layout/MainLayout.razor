@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject ProtectedLocalStorage ProtectedLocalStorage;

<MudThemeProvider IsDarkMode="@_isDarkMode" @ref="@_mudThemeProvider"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudMainContent Style="padding: 0;">
        <CascadingValue Value="@this">
            @Body
        </CascadingValue>
    </MudMainContent>
    <NavMenu/>
    <div style="height: 10vh"></div>
</MudLayout>

@code {

    bool _isDarkMode;
    /*bool _askWhenDelete;*/
    private MudThemeProvider? _mudThemeProvider;

    public async void ToggleDarkMode(bool? changedDarkMode)
    {
        if (changedDarkMode.HasValue)
        {
            _isDarkMode = changedDarkMode.Value;
        }
        else
        {
            _isDarkMode = await _mudThemeProvider!.GetSystemPreference();
        }
        StateHasChanged();
        await ProtectedLocalStorage.SetAsync("DarkMode", changedDarkMode!);
    }
    
    /*public async void ToggleAskWhenDelete(bool? changedAskWhenDelete)
    {
        if (changedAskWhenDelete.HasValue)
        {
            _askWhenDelete = changedAskWhenDelete.Value;
        }
        else
        {
            _askWhenDelete = await _mudThemeProvider!.GetSystemPreference();
        }
        StateHasChanged();
        await ProtectedLocalStorage.SetAsync("AskWhenDelete", changedAskWhenDelete!);
    }*/

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        // darkMode
        var darkModeResult = await ProtectedLocalStorage.GetAsync<bool?>("DarkMode");

        _isDarkMode = await _mudThemeProvider!.GetSystemPreference();
        if (darkModeResult is { Success: true, Value: { } })
        {
            _isDarkMode = darkModeResult.Value.Value;
        }
        
        // ask when delete
        /*var askWhenDeleteResult = await ProtectedLocalStorage.GetAsync<bool?>("AskWhenDelete");

        _askWhenDelete = await _mudThemeProvider!.GetSystemPreference();
        if (askWhenDeleteResult is { Success: true, Value: { } })
        {
            _askWhenDelete = askWhenDeleteResult.Value.Value;
        }*/
        StateHasChanged();
    }
}