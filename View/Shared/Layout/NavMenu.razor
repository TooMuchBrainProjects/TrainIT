<div class="navigation">
    <ul>
        <li class="@active[0]">
            <a href="/activityview">
                <span class="icon">
                    <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Color="Color.Inherit"/>
                </span>
                <span class="text">Activities</span>
            </a>
        </li>
        <li class="@active[1]">
            <a href="/exerciseview">
                <span class="icon">
                    <MudIcon Icon="@Icons.Material.Filled.FitnessCenter" Color="Color.Inherit"/>
                </span>
                <span class="text">Exercises</span>
            </a>
        </li>
        <li class="@active[2]">
            <a href="/workoutview">
                <span class="icon">
                    <MudIcon Icon="@Icons.Material.Filled.List" Color="Color.Inherit"/>
                </span>
                <span class="text">Workouts</span>
            </a>
        </li>
    </ul>
    <div class="indicator"></div>
</div>


@code {
    private string[] active = new string[3];

    private void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        SetActive(e.Location);
    }

    private void SetActive(string location)
    {
        if (location.Contains("activityview"))
        {
            ActiveLink1();
        }

        else if (location.Contains("exerciseview"))
        {
            ActiveLink2();
        }

        else if (location.Contains("workoutview"))
        {
            ActiveLink3();
        }

        else
        {
            DisableIndicator();
        }
        
        StateHasChanged();
        
    }

    private void ActiveLink1()
    {
        active[0] = "active";
        active[1] = "";
        active[2] = "";
    }

    private void ActiveLink2()
    {
        active[0] = "";
        active[1] = "active";
        active[2] = "";
    }

    private void ActiveLink3()
    {
        active[0] = "";
        active[1] = "";
        active[2] = "active";
    }

    private void DisableIndicator()
    {
        active[0] = "";
        active[1] = "";
        active[2] = "";
    }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += LocationChanged;
        SetActive(NavigationManager.Uri);
    }

}

<style>
    :root {
        --clr: #32333D;
    }
    
    .navigation {
        position: fixed;
        height: 4rem;
        bottom: 0rem;
        left: 0rem;
        right: 0rem;
        
        border-top-left-radius: .8rem;
        border-top-right-radius: .8rem;
        background: #fff;
        
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    .navigation ul {
        display: flex;
        justify-content: space-around;
        width: 90vw;
    }
    
    .navigation ul li {
        position: relative;
        list-style: none;
        width: 4rem;
        height: 4rem;
        z-index: 1;
    }
    
    .navigation ul li a {
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        width: 100%;
        text-align: center;
        font-weight: 500;
    }
    
    .navigation ul li a .icon {
        position: relative;
        display: block;
        line-height: 4.4rem;
        font-size: 1.5em;
        text-align: center;
        transition: 0.5s;
        color: var(--clr);
    }
    
   /* .navigation ul li.active a .icon {
        transform: translateY(-1.9rem) scale(1.1);
    }*/
    
    .navigation ul li a .text {
        position: absolute;
        color: #000;
        font-weight: 400;
        font-size: 0.75em;
        letter-spacing: 0.05em;
        opacity: 0;
        transition: 0.5s;
        transform: translateY(1rem);
    }
    
    /*.navigation ul li.active a .text {
        opacity: 1;
        transform: translateY(.7rem);
    }*/
    
    .indicator {
        position: absolute;
        top: 0.32rem;
        width: 3rem;
        height: 3rem;
        background: #29fd53;
        border-radius: 50%;
        /*border: .4rem solid var(--clr); */
        transition: 0.5s;
        opacity: 1;
    }
    
    /*.indicator::before {
        content: "";
        position: absolute;
        top: 50%;
        left: -22px;
        width: 20px;
        height: 20px;
        background: transparent;
        border-top-right-radius: 20px;
        box-shadow: 1px -10px 0 0 var(--clr);
    }
    
    .indicator::after {
        content: "";
        position: absolute;
        top: 50%;
        right: -22px;
        width: 20px;
        height: 20px;
        background: transparent;
        border-top-left-radius: 20px;
        box-shadow: -1px -10px 0 0 var(--clr);
    }*/
    
    :has(ul>li:nth-child(1).active) .indicator {
        transform: translateX(-30vw);
    }
    
    :has(ul>li:nth-child(2).active) .indicator {
        transform: translateX(0);
    }
    
    :has(ul>li:nth-child(3).active) .indicator {
        transform: translateX(30vw);
    }
    
    :not(:has(ul>li.active)) .indicator {
        transform: translateX(0) scale(0);
    }

</style>