@page "/"

<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="16">
                <h1 class="ms-4">Statistics</h1>

                <MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="@_selectedIndex" XAxisLabels="@_xAxisLabels" Width="100%" ChartOptions="@_chartOptions"></MudChart>

                <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" TimelinePosition="TimelinePosition.Top">
                    <MudTimelineItem>
                        <MudText Align="Align.Center">Item A</MudText>
                    </MudTimelineItem>
                    <MudTimelineItem Color="Color.Primary">
                        <MudText Align="Align.Center">Item B</MudText>
                    </MudTimelineItem>
                    <MudTimelineItem>
                        <MudText Align="Align.Center">Item C</MudText>
                    </MudTimelineItem>
                </MudTimeline>
            </MudStack>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="4">
                <h1 class="ms-4 mb-12">You are not logged in!</h1>
                <MudPaper class="pa-4" Elevation="3">
                    <div>Please click <a href="/login" style="color: yellow;">here</a> in order to get redirected to the Log In site!</div>
                </MudPaper>
            </MudStack>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>


@code {
    private int _selectedIndex = -1; //default value cannot be 0 -> first selectedindex is 0.

    List<ChartSeries> Series { get; set; } = null!;
    private readonly ChartOptions _chartOptions = new();
    string[] _xAxisLabels = { };

    List<List<Activity>> Activities { get; set; } = null!;

    double Average(IEnumerable<double> values)
    {
        double sum = 0;
        foreach (var value in values)
        {
            sum += value;
        }
        return (sum / values.Count());
    }

    protected override void OnInitialized()
    {
        Series = new List<ChartSeries>()
        {
            new ChartSeries()
            {
                Name = "Overall", Data = new double[]
                {
                    Average(new List<double>()
                    {
                        (double)(Activities[0][0].Weight * Activities[0][0].Repetition * Activities[0][0].Set) / 10,
                        (double)(Activities[1][0].Weight * Activities[1][0].Repetition * Activities[1][0].Set) / 10,
                        (double)(Activities[2][0].Weight * Activities[2][0].Repetition * Activities[2][0].Set) / 10,
                    }),
                    Average(new List<double>()
                    {
                        (double)(Activities[0][1].Weight * Activities[0][1].Repetition * Activities[0][1].Set) / 10,
                        (double)(Activities[1][1].Weight * Activities[1][1].Repetition * Activities[1][1].Set) / 10,
                        (double)(Activities[2][1].Weight * Activities[2][1].Repetition * Activities[2][1].Set) / 10,
                    }),
                    Average(new List<double>()
                    {
                        (double)(Activities[0][2].Weight * Activities[0][2].Repetition * Activities[0][2].Set) / 10,
                        (double)(Activities[1][2].Weight * Activities[1][2].Repetition * Activities[1][2].Set) / 10,
                        (double)(Activities[2][2].Weight * Activities[2][2].Repetition * Activities[2][2].Set) / 10,
                    }),
                    Average(new List<double>()
                    {
                        (double)(Activities[0][3].Weight * Activities[0][3].Repetition * Activities[0][3].Set) / 10,
                        (double)(Activities[1][3].Weight * Activities[1][3].Repetition * Activities[1][3].Set) / 10,
                        (double)(Activities[2][3].Weight * Activities[2][3].Repetition * Activities[2][3].Set) / 10,
                    })
                }
            },
            new ChartSeries()
            {
                Name = Activities[0][0].Exercise.Name, Data = new double[]
                {
                    (double)(Activities[0][0].Weight * Activities[0][0].Repetition * Activities[0][0].Set) / 10,
                    (double)(Activities[0][1].Weight * Activities[0][1].Repetition * Activities[0][1].Set) / 10,
                    (double)(Activities[0][2].Weight * Activities[0][2].Repetition * Activities[0][2].Set) / 10,
                    (double)(Activities[0][3].Weight * Activities[0][3].Repetition * Activities[0][3].Set) / 10,
                }
            },
            new ChartSeries()
            {
                Name = Activities[1][0].Exercise.Name, Data = new double[]
                {
                    (double)(Activities[1][0].Weight * Activities[1][0].Repetition * Activities[1][0].Set) / 10,
                    (double)(Activities[1][1].Weight * Activities[1][1].Repetition * Activities[1][1].Set) / 10,
                    (double)(Activities[1][2].Weight * Activities[1][2].Repetition * Activities[1][2].Set) / 10,
                    (double)(Activities[1][3].Weight * Activities[1][3].Repetition * Activities[1][3].Set) / 10,
                }
            },
            new ChartSeries()
            {
                Name = Activities[0][0].Exercise.Name, Data = new double[]
                {
                    (double)(Activities[2][0].Weight * Activities[2][0].Repetition * Activities[2][0].Set) / 10,
                    (double)(Activities[2][1].Weight * Activities[2][1].Repetition * Activities[2][1].Set) / 10,
                    (double)(Activities[2][2].Weight * Activities[2][2].Repetition * Activities[2][2].Set) / 10,
                    (double)(Activities[2][3].Weight * Activities[2][3].Repetition * Activities[2][3].Set) / 10,
                }
            },
        };

        _chartOptions.InterpolationOption = InterpolationOption.NaturalSpline;
        _chartOptions.DisableLegend = true;

        _xAxisLabels = new[]
        {
            Activities[0][0].DateValue.ToString(),
            Activities[0][1].DateValue.ToString(),
            Activities[0][2].DateValue.ToString(),
            Activities[0][3].DateValue.ToString(),
        };
    }

}