@page "/EditSubExercise"
@page "/EditSubExercise/{SubExerciseId:int?}"
@inject UserService UserService
@inject ILogger<Login> Logger
@inherits CancellationComponent
@inject ISubExerciseRepository SubExerciseRepository


<AuthorizeView>
    <Authorized>
        @if (SubExerciseId.HasValue)
        {
            <MudContainer Class="mt-8">
            <MudStack Spacing="16">
                <h1 class="ms-4">New exercise</h1>
                <MudGrid Style="width: 100%;margin: 0">
                    <MudItem xs="12">
                        <MudPaper>
                            <div>
                                @SubExercise.Exercise.Name
                            </div>
                            <div>
                                @SubExercise.Exercise.Machine
                            </div>
                            <div>
                                @SubExercise.Exercise.Description
                            </div>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12">
                        <MudPaper Class="pa-4">
                            <div @onkeydown="@TryAdd">
                                <MudForm @ref="_form">
                                    @if (_error is not null)
                                    {
                                        <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="() => _error = null">
                                            @(_error)
                                        </MudAlert>
                                    }
                                    <MudTextField
                                        T="decimal"
                                        InputMode="InputMode.text" InputType="InputType.Text" Immediate="true"
                                        Label="Weight"
                                        @bind-Value="SubExercise.Weight"
                                        For="() => SubExercise.Weight"/>
                                    <MudTextField
                                        T="int"
                                        InputMode="InputMode.text" InputType="InputType.Text" Immediate="true"
                                        Label="Set"
                                        @bind-Value="SubExercise.Set"
                                        For="() => SubExercise.Set"/>
                                    <MudTextField
                                        T="int"
                                        InputMode="InputMode.text" InputType="InputType.Text" Immediate="true"
                                        Label="Repetition"
                                        @bind-Value="SubExercise.Repetition"
                                        For="() => SubExercise.Repetition"/>
                                </MudForm>
                            </div>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudStack>
        </MudContainer>
        <div Style="position: fixed; bottom: 9vh; right: 2vh; display: grid; gap: 1rem;">
            <a href="/allexercises">
                <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Check"/>
            </a>
        </div>
        }
        else
        {
            <div>No data ...</div>
        }
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


@code {
    bool _isExercise;
    MudForm _form = null!;
    string? _error;

    bool _isShow;

    SubExercise SubExercise { get; set; } = new();

    [Parameter]
    public int? SubExerciseId { get; set; }

    async void TryAdd(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
            await HandleNewExerciseAsync();
    }

    async Task HandleNewExerciseAsync()
    {
        try
        {
            if (!await _form.IsFormValidAsync()) return;
            _isExercise = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            _isExercise = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (SubExercise != null)
        {
            SubExercise = await SubExerciseRepository.ReadAsync(SubExerciseId.Value);
        }
    }

}