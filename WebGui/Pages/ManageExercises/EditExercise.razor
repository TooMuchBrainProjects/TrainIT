@page "/editexercise/{ExerciseId:int}"

<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="16">
                <h1 class="ms-4">New exercise</h1>
                <MudDivider/>
                <MudGrid Style="width: 100%;margin: 0">
                    <MudItem xs="12">
                        <MudPaper Class="pa-4">
                            <div @onkeydown="@TryAdd">
                                <MudForm @ref="_form">
                                    @if (_error is not null)
                                    {
                                        <MudAlert Severity="Severity.Error" ShowCloseIcon="true" CloseIconClicked="() => _error = null">
                                            @(_error)
                                        </MudAlert>
                                    }
                                    <MudTextField
                                        T="string"
                                        InputMode="InputMode.text" InputType="InputType.Text" Immediate="true"
                                        Counter="100" MaxLength="100"
                                        Label="Name"
                                        @bind-Value="Exercise.Name"
                                        For="() => Exercise.Name"/>
                                    <MudTextField
                                        T="string"
                                        InputMode="InputMode.text" InputType="InputType.Text" Immediate="true"
                                        Counter="100" MaxLength="100"
                                        Label="Machine"
                                        @bind-Value="Exercise.Machine"
                                        For="() => Exercise.Machine"/>
                                    <MudTextField
                                        T="string"
                                        InputMode="InputMode.text" InputType="InputType.Text" Immediate="true"
                                        Label="Description"
                                        @bind-Value="Exercise.Description"
                                        For="() => Exercise.Description"/>
                                </MudForm>
                            </div>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudStack>
        </MudContainer>
        <div Style="position: fixed; bottom: 9vh; right: 2vh; display: grid; gap: 1rem;">
            <a href="/exerciseview">
                <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Check"/>
            </a>
        </div>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


@code {
    bool _isExercise;
    MudForm _form = null!;
    string? _error;

    bool _isShow;
    
    [Parameter]
    public int ExerciseId { get; set; }

    Exercise Exercise { get; set; } = null!;

    async void TryAdd(KeyboardEventArgs e)
    {
        if (e.Code is "Enter" or "NumpadEnter")
            await HandleNewExerciseAsync();
    }

    async Task HandleNewExerciseAsync()
    {
        try
        {
            if (!await _form.IsFormValidAsync()) return;
            Exercise.User = UserService.CurrentUser!;
            Exercise.UserId = UserService.CurrentUser!.Id;
            await ExerciseRepository.CreateAsync(Exercise);
            _isExercise = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        finally
        {
            _isExercise = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Exercise = await ExerciseRepository.GetExerciseById(ExerciseId);
    }

}