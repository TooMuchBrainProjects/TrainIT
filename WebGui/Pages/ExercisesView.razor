@page "/exercises"
@using Model.Entities
@using Domain.Repositories.Interfaces
@using WebGui.Services
@inject UserService UserService;
@inject ISubExerciseRepository SubExerciseRepository;
@inject ILogger<ExercisesView> Logger;

<AuthorizeView>
    <Authorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="16">
                <h1 class="ms-4">Exercises</h1>

                <MudCardActions>
                    <MudButton OnClick="PrevDate">
                        <MudIcon Icon="@Icons.Material.Filled.ArrowBackIos" Title="Prev"/>
                    </MudButton>
                    <MudDatePicker Label="Choose date" @ref="_picker" Date="date" DateChanged="HandleDateChangeAsync" AutoClose="true" MaxDate="@maxDate" class="mx-4">
                        <PickerActions Context="_">
                            <MudButton Class="mr-auto align-self-start" OnClick="Today">Today</MudButton>
                        </PickerActions>
                    </MudDatePicker>
                    <MudButton OnClick="NextDate">
                        <MudIcon Icon="@Icons.Material.Filled.ArrowForwardIos" Title="Next"/>
                    </MudButton>
                </MudCardActions>
                <MudDivider/>
            </MudStack>

            <DataInit Data="SubExercises">
                <ChildContent Context="subExercises">
                    <MudList Clickable="true">
                        @foreach (var subexercise in subExercises)
                        {
                            <MudListItem OnClick="EditSubexercise">
                                <MudGrid>
                                    <MudItem xs="9">
                                        @subexercise.Exercise.Name
                                    </MudItem>
                                    <MudItem xs="2" Style="text-align: end;">
                                        @Math.Round(subexercise.Weight, 2)
                                    </MudItem>
                                    <MudItem xs="1">
                                        <MudIcon Icon="@Icons.Filled.ArrowForwardIos"/>
                                    </MudItem>
                                </MudGrid>
                            </MudListItem>
                        }
                    </MudList>
                </ChildContent>
            </DataInit>
        </MudContainer>

        <div Style="position: fixed; bottom: 9vh; right: 2vh; display: grid; gap: 1rem;">
            <a href="/presets">
                <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.FilterList"/>
            </a>
            <a href="/allexercises">
                <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.PlusOne"/>
            </a>
        </div>
    </Authorized>
    <NotAuthorized>
        <MudContainer Class="mt-8">
            <MudStack Spacing="4">
                <h1 class="ms-4 mb-12">You are not logged in!</h1>
                <MudPaper class="pa-4" Elevation="3">
                    <div>Please click <a href="/login" style="color: yellow;">here</a> in order to get redirected to the Log In site!</div>
                </MudPaper>
            </MudStack>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>


@code {
    MudDatePicker _picker;
    DateTime? date = DateTime.Today;
    DateTime? maxDate = DateTime.Today;
    bool _addOptionsAreOpen;

    public List<SubExercise> SubExercises { get; set; } = null!;

    private async Task Today()
    {
        await _picker.GoToDate(DateTime.Today);
        _picker.Close();
    }

    public void ToggleAddOptionsOpen()
    {
        _addOptionsAreOpen = !_addOptionsAreOpen;
    }

    async void HandleDateChangeAsync(DateTime? dateTime)
    {
        try
        {
            date = dateTime;
            SubExercises = await SubExerciseRepository.GetSubexercisesByUserByDate(UserService.CurrentUser!.Id, new DateOnly(date.Value.Year, date.Value.Month, date.Value.Day));
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    async Task PrevDate()
    {
        date = date.Value.AddDays(-1);
        SubExercises = await SubExerciseRepository.GetSubexercisesByUserByDate(UserService.CurrentUser!.Id, new DateOnly(date.Value.Year, date.Value.Month, date.Value.Day));
        StateHasChanged();
    }

    async Task NextDate()
    {
        if (date.Value != maxDate.Value)
        {
            date = date.Value.AddDays(1);
            SubExercises = await SubExerciseRepository.GetSubexercisesByUserByDate(UserService.CurrentUser!.Id, new DateOnly(date.Value.Year, date.Value.Month, date.Value.Day));
            StateHasChanged();
        }
    }

    async Task EditSubexercise()
    {
        
    }

    protected override async Task OnInitializedAsync()
    {
        if (UserService.CurrentUser != null)
        {
            Logger.LogInformation($"UserId: {UserService.CurrentUser.Id}");
            SubExercises = await SubExerciseRepository.GetSubexercisesByUserByDate(UserService.CurrentUser!.Id, new DateOnly(date.Value.Year, date.Value.Month, date.Value.Day));
        }
    }

}