@page "/exercises"
@using Model.Entities
@using Domain.Repositories.Interfaces
@using WebGui.Services
@inject UserService UserService;
@inject ISubExerciseRepository SubExerciseRepository;
@attribute [Authorize]

<MudContainer Class="mt-8">
    <MudStack Spacing="16">
        <h1 class="ms-4">Exercises</h1>


        <MudDatePicker  Label="Choose date" @ref="_picker" Date="date" DateChanged="HandleDateChangeAsync" AutoClose="true" MaxDate="@maxDate" class="mx-4">
            <PickerActions>
                <MudButton Class="mr-auto align-self-start" OnClick="Today">Today</MudButton>
            </PickerActions>
        </MudDatePicker>

        <MudDivider/>

    </MudStack>
</MudContainer>

<DataInit Data="SubExercises">
    <ChildContent>
        <MudList Clickable="true" Style="width: 100vw">
            @foreach (var subexercise in SubExercises)
            {
                <MudListItem>
                    <MudGrid>
                        <MudItem xs="7">
                            @subexercise.Exercise.Name
                        </MudItem>
                        <MudItem xs="3">
                            @subexercise.Weight
                        </MudItem>
                        <MudItem xs="2">
                            <MudIcon Icon="@Icons.Filled.ArrowForwardIos" Title="Next"/>
                        </MudItem>
                    </MudGrid>
                </MudListItem>
            }
        </MudList>
    </ChildContent>
</DataInit>


<MudStack>
    <MudPopover Open="@_addOptionsAreOpen" Class="pa-4">
        <div class="d-flex flex-column">
            <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.PlusOne" OnClick="@ToggleAddOptionsOpen" Class="mb-4"/>
            <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.HdrPlus" OnClick="@ToggleAddOptionsOpen"/>
        </div>
    </MudPopover>
    <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Add" OnClick="@ToggleAddOptionsOpen"/>
</MudStack>


@code {
    MudDatePicker _picker;
    DateTime? date = DateTime.Today;
    DateTime? maxDate = DateTime.Today;
    bool _addOptionsAreOpen;

    public List<SubExercise> SubExercises { get; set; } = null!;

    private async Task Today()
    {
        await _picker.GoToDate(DateTime.Today);
        _picker.Close();
    }

    public void ToggleAddOptionsOpen()
    {
        _addOptionsAreOpen = !_addOptionsAreOpen;
    }

    async void HandleDateChangeAsync(DateTime? dateTime)
    {
        try
        {
            date = dateTime;
            SubExercises = await SubExerciseRepository.GetSubExercisesByDate(UserService.CurrentUser!.Id, new DateOnly(date.Value.Year, date.Value.Month, date.Value.Day));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        SubExercises = await SubExerciseRepository.GetSubExercisesByDate(UserService.CurrentUser!.Id, new DateOnly(date.Value.Year, date.Value.Month, date.Value.Day));
    }

}